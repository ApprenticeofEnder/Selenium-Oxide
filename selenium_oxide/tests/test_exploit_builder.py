import unittest
from urllib.parse import urlparse

from selenium_oxide import ExploitBuilder
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


# class TestExploitBuilder(unittest.TestCase):
#     def __init__(self, methodName: str = ...) -> None:
#         super().__init__(methodName)
#         self.xss_marker = "XSS"

#         self.username_label_xpath = '//*[@id="username-label"]'
#         self.username_xpath = "/html/body/form/div[1]/input[1]"
#         self.password_xpath = "/html/body/form/div[1]/input[2]"
#         self.submit_xpath = "/html/body/form/div[1]/button"
#         self.welcome_xpath = '//*[@id="welcome"]'

#     @classmethod
#     def setUpClass(cls):
#         cls.base_url = "http://test_server:1337/"
#         cls.exploit = ExploitBuilder(cls.base_url, headless=True)

#     @classmethod
#     def tearDownClass(cls):
#         cls.exploit.driver.close()

#     @property
#     def driver(self):
#         return self.exploit.driver

#     def setUp(self) -> None:
#         self.driver.delete_all_cookies()
#         return super().setUp()

#     def test_navigation(self):
#         self.exploit.get("/")
#         self.assertEqual(self.driver.current_url, self.base_url)

#     def test_content_extraction(self):
#         target = "Username"
#         self.exploit.get("/login")
#         get_results = self.exploit.get_contents(self.username_label_xpath)
#         self.assertEqual(get_results, target)

#     def test_entry(self):
#         (
#             self.exploit.get("/login")
#             .type_entry(self.username_xpath, self.xss_marker)
#             .type_entry(self.password_xpath, self.xss_marker)
#         )
#         entered_username = self.driver.find_element(
#             value="username-input"
#         ).get_attribute("value")
#         entered_password = self.driver.find_element(
#             value="password-input"
#         ).get_attribute("value")
#         self.assertEqual(entered_username, self.xss_marker)
#         self.assertEqual(entered_password, self.xss_marker)

#     def test_type_and_enter(self):
#         target = f"Welcome, {self.xss_marker}!"
#         (
#             self.exploit.get("/login")
#             .type_entry(self.username_xpath, self.xss_marker)
#             .type_entry(self.password_xpath, self.xss_marker)
#             .send_enter(self.password_xpath)
#         )
#         WebDriverWait(self.driver, 2).until(
#             EC.text_to_be_present_in_element((By.ID, "welcome"), "Welcome")
#         )
#         result = self.exploit.get_contents(self.welcome_xpath)
#         self.assertEqual(result, target)

#     def test_click(self):
#         target = f"Welcome, {self.xss_marker}!"
#         (
#             self.exploit.get("/login")
#             .type_entry(self.username_xpath, self.xss_marker)
#             .type_entry(self.password_xpath, self.xss_marker)
#             .click(self.submit_xpath)
#         )
#         WebDriverWait(self.driver, 2).until(
#             EC.text_to_be_present_in_element((By.ID, "welcome"), "Welcome")
#         )
#         result = self.exploit.get_contents(self.welcome_xpath)
#         self.assertEqual(result, target)

#     def test_login(self):
#         target = f"Welcome, {self.xss_marker}!"
#         (
#             self.exploit.login(
#                 "/login",
#                 self.xss_marker,
#                 self.xss_marker,
#                 self.username_xpath,
#                 self.password_xpath,
#                 self.submit_xpath,
#             )
#         )
#         WebDriverWait(self.driver, 2).until(
#             EC.text_to_be_present_in_element((By.ID, "welcome"), "Welcome")
#         )
#         result = self.exploit.get_contents(self.welcome_xpath)
#         self.assertEqual(result, target)

#     def test_get_cookies(self):
#         target = f"fake-cookie-session-value"
#         (
#             self.exploit.get("/login")
#             .type_entry(self.username_xpath, self.xss_marker)
#             .type_entry(self.password_xpath, self.xss_marker)
#             .click(self.submit_xpath)
#         )
#         WebDriverWait(self.driver, 2).until(
#             EC.text_to_be_present_in_element((By.ID, "welcome"), "Welcome")
#         )
#         cookies = self.exploit.get_cookies()
#         session_cookie = self.exploit.get_cookie_by_name("fakesession")
#         self.assertEqual(len(cookies), 1)
#         self.assertEqual(session_cookie["value"], target)

#     def test_set_cookie(self):
#         (
#             self.exploit.get("/login")
#             .type_entry(self.username_xpath, self.xss_marker)
#             .type_entry(self.password_xpath, self.xss_marker)
#             .click(self.submit_xpath)
#         )
#         WebDriverWait(self.driver, 2).until(
#             EC.text_to_be_present_in_element((By.ID, "welcome"), "Welcome")
#         )
#         self.exploit.set_cookie("fakesession", self.xss_marker)
#         session_cookie = self.exploit.get_cookie_by_name("fakesession")
#         self.assertEqual(session_cookie["value"], self.xss_marker)

#     def test_wait_for_alert(self):
#         payload = f"<script>alert(`{self.xss_marker}`)</script>"
#         alert_fired = (
#             self.exploit.get("/login")
#             .type_entry(self.username_xpath, payload)
#             .type_entry(self.password_xpath, self.xss_marker)
#             .click(self.submit_xpath)
#             .wait_for_alert(marker=self.xss_marker)
#         )
#         self.assertTrue(alert_fired)

#     def test_api_get(self):
#         target = "<h1>Selenium Oxide Testing Server</h1>"
#         response = self.exploit.api_get("/")
#         response.raise_for_status()
#         self.assertEqual(response.status_code, 200)
#         self.assertEqual(response.text, target)

#     def test_api_get_set_url(self):
#         target = "<h1>Selenium Oxide Testing Server</h1>"
#         response = self.exploit.api_get("/", base_url=self.base_url)
#         response.raise_for_status()
#         self.assertEqual(response.status_code, 200)
#         self.assertEqual(response.text, target)

#     def test_api_post(self):
#         response = self.exploit.api_post(
#             "/login", data={"username": self.xss_marker, "password": self.xss_marker}
#         )
#         response.raise_for_status()
#         self.assertIn(self.xss_marker, response.text)

#     def test_api_post_set_url(self):
#         response = self.exploit.api_post(
#             "/login",
#             base_url=self.base_url,
#             data={"username": self.xss_marker, "password": self.xss_marker},
#         )
#         response.raise_for_status()
#         self.assertIn(self.xss_marker, response.text)

#     def test_js_execution(self):
#         self.exploit.get("/").execute_script(f"alert('{self.xss_marker}');")
#         alert_fired = self.exploit.wait_for_alert(marker=self.xss_marker)
#         self.assertTrue(alert_fired)

#     def test_js_return(self):
#         add_result = self.exploit.get("/").execute_script(f"return 1 + 1;")
#         self.assertEqual(add_result, 2)


# class TestProxy(TestExploitBuilder):
#     @classmethod
#     def setUpClass(cls):
#         cls.base_url = "http://test_server:1337/"
#         cls.exploit = ExploitBuilder(
#             cls.base_url, headless=True, use_proxy=True, proxy_address="proxy:8080"
#         )

#     @classmethod
#     def tearDownClass(cls):
#         cls.exploit.driver.close()


# @unittest.skip("need to solidify Chrome testing")
# class TestChrome(TestExploitBuilder):
#     def __init__(self, methodName: str = ...) -> None:
#         super().__init__(methodName)
#         self.exploit = ExploitBuilder(
#             self.parsed_url.scheme, self.parsed_url.netloc, browser="chrome"
#         )
